---
execute:
  enabled: false
title: 'Worksheet 1.1: First Steps in Python'
jupyter: python3
---


Welcome to the first worksheet of Software Design! In this worksheet, you'll get
a bit more comfortable with running, reading, and writing Python code, as well
as gain some practice with how to diagnose bugs in your code if things go wrong.

Each module will have two worksheets, with each taking place on a separate class
day. We will go through these problems somewhat as a class - typically, we will
present the problems to you, set you off to work on them, and then come back to
discuss and work through solutions.

It is good practice just to be present for class and to follow along with the
material, so as we discuss solutions in class, feel free to take our code and
write it for your submission. If you miss class, you will need to work the
solutions out on your own - copying from other students is not allowed.
(Discussing approaches, however, is allowed.)

After completing this worksheet, you should be able to:

- Explain the differences between executing Python code on the command line, in
  a file, and in a notebook.
- Read a short, simple snippet of Python code and deduce what the type and value
  of each variable in that snippet will be.
- Read and write code with different mathematical operators in Python.
- Apply these mathematical operators to solve programming problems.
- State the errors that will occur in Python code containing simple syntax or
  runtime errors.

## 0. Setup

Before moving onto the first problems, you should first convert this `.qmd` file
into a Jupyter notebook. To do so, run the following command:

```
quarto convert 1-1-first-steps-python.qmd
```

Once you have done that, you should have a file called
`1-1-first-steps-python.ipynb`. Open that file in VS Code.

## 1. Run, Python, Run

First, you will try running a bit of Python code in various formats.

### 1.1. Python Interpreter

Open the Python interpreter on the command line by running the command `python`.
Then, run the following lines one by one:

```
6 * 7
print("I am spam")
x = 42
```

What output do you get? Write your answer in the cell below.

```markdown
Solution:

Integer, String, Integer
```

### 1.2. Python File

The three lines of code above are also found in `code_sample.py`. Run that file
by running the command `python code_sample.py` on the command line.

What output do you get and why? Write your answer in the cell below.

```markdown
Solution:

A printed "I am Spam" because nothing else is printed
```

### 1.3. Notebook Cell

Finally, the three lines of code are found below. Run the cell.


```{python}
6 * 7
print("I am spam")
x = 42
```

What output do you get and why? Write your answer in the cell below.

```markdown
Solution:

A printed "I am spam" because nothing else is printed
```

### 1.4. Other Notebook and Exploration

You are likely running this notebook in VS Code. While this is fine, it is
useful to try running a notebook in Jupyter Lab as well. While on your own
machine it does not matter, you may find yourself accessing Jupyter through the
Web some day, and it is worth having tried the interface, even if only once.

On the command line, in this folder, run the following command:

```
jupyter lab
```

This will probably produce output that includes a line like this:

```
[I 2023-01-31 09:02:56.018 ServerApp] http://localhost:8888/lab?token=5f5c0f78470d4bcb8151d49a052678507439e6b7f22e56ff
[I 2023-01-31 09:02:56.018 ServerApp]  or http://127.0.0.1:8888/lab?token=5f5c0f78470d4bcb8151d49a052678507439e6b7f22e56ff
```

If a browser window does not open automatically, copy and paste that URL (either
one) into your browser. In the left sidebar, you should see a screen that allows
you to open a file. Open this notebook `1-1-first-steps-python.ipynb`.

Here is the cell of code that we have been working with:

```{python}
6 * 7
print("I am spam")
x = 42
```

In the previous part you saw that the output is the same as if you ran these
lines from a file, but there is a case in which running a code cell produces
different output than running a file. What is that? Write your answer in the
cell below.

```markdown
Solution:

In the interpreter
```

## 2. Being Reasonable with Code

Even though this course will involve writing a fair bit of code, it's important
to practice reading and understanding code as well. For the following code
cells, read and reason through the lines of code to determine the type and value
of each variable in the code after it runs.

It is good practice to get use to reasoning through code without running it, so
we recommend that you do not actually run the code. However, if you do find it
helpful, you may create and run code cells.

### 2.1. Simple Assignment

What is the type and value of `x` after this cell runs?

```{python}
x = 42
```

```markdown
Solution:

Integer, 42
```

### 2.2. Double Assignment

What is the type and value of `x` after this cell runs?

```{python}
x = 42
x = "I am spam"
print(x)
```

```markdown
Solution:

String "I am spam"
```

### 2.3. Simple Operator

What are the types and values of `x`, `y`, and `z` after this cell runs?

```{python}
x = 12
y = 13
z = x + y
```

```markdown
Solution:

X: integer, 12 Y: integer, 13 Z: integer, 25
```

### 2.4. Division

What are the types and values of `x`, `y`, and `z` after this cell runs?

```{python}
x = 52
y = 13
z = x / y
```

```markdown
Solution:

X: integer, 52 Y: integer, 13 Z: float, 4.0
```

### 2.5. Conditional

What are the types and values of `x` and `y` after this cell runs?

```{python}
x = 42
if x % 2 == 0:
    y = "I am even"
else:
    y = 100
```

```markdown
Solution:

X: Integer, 42 Y: string, "I am even"
```

### 2.6. Condition

What are the types and values of `x` and `y` after this cell runs?

```{python}
x = 42
y = (x % 2 == 0)
print(x)
print(y)
```

```markdown
Solution:

X: integer, 42 Y: boolean, true
```

## 3. Operator, Get Me Some Code

In this problem, you will try applying your knowledge of different operators to
solve some programming tasks.

### 3.1. Boolean to Integer

You may know that you can convert a float to an integer. But you can also
convert a boolean value like `True` or `False` to an integer.

What do `True` and `False` become when you convert them to an integer? Write
your answer in the cell below.

```markdown
Solution:

True = 1, False = 0
```

### 3.2. Float to Integer

You may know that you can convert a float to an integer like this:

```{python}
int(5.9)
```

If you run this cell, you will get 3.

Try running a few more test cases. How are floats converted to integers - if you
have a float `x`, how is `int(x)` determined? Write your answer in the cell
below.

```markdown
Solution:

the float is cut at the decimal place, or rounded down
```

### 3.3. License Plates

License plates in some states have three letters of the alphabet (always
uppercase) and four digits. Assuming no restrictions on what those license
plates can be, how many possible license plate numbers are there in these
states? Write you answer in the cell below.

```markdown
Solution:

26**3 * 10**3
```

### 3.4. Bussin'

Suppose that you can rent one or more buses, each of which seats up to 50
people, and you need to transport 60 people. Then you will need to rent two
buses, because you cannot fit all of them into one bus.

Now instead suppose that each bus seats `bus_size` people, and you need to
transport `num_people` people. How many buses will you need to rent? Write your
answer in the cell below as a Python expression.

```markdown
Solution:

buses = num_people / bus_size
if num_people % bus_size > 0
    buses = buses + 1
```

## 4. Python, We Have a Problem

Now you will try seeing what happens when you purposely make some errors in
code.

Below is a code cell.

```{python}
x = 42
y = (x - 1) * 3
if y % 2 == 0:
    print("y is even")
    z = 4 + "la"
else:
    print("y is odd")
    z = "fa"
print(z)
```

For each of the items below, what error do you get when you make the change?
Where does the error occur?

- You delete the parenthesis (`(`) at the left end of `(x - 1)`.
- You delete the parenthesis (`)`) at the right end of `(x - 1)`.
- You delete the colon (`:`) at the end of the `if` statement.
- You change the `*` in `x = 4 * "la"` to a `+`.
- You change the number of spaces before any of the lines under the `if` or
  `else` blocks.

Write your answers in the cell below.

```markdown
Solution:

- SyntaxError: unmatched ')' line 2
- SyntaxError: '(' was never closed line 2
- SyntaxError: expected ':' line 3
- No error because statement is never being assesed
- IndentationError: unindent does not match any outer indentation level

```

